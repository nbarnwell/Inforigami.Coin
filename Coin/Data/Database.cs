

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Coin\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "server=(local);database=Coin;trusted_connection=true;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Coin.Data
{
    using System.Linq;

    #region Unit of work

    public interface IDatabase : System.IDisposable
    {
        System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        System.Data.Entity.DbSet<AccountStatement> AccountStatements { get; set; } // AccountStatement
        System.Data.Entity.DbSet<AccountTransaction> AccountTransactions { get; set; } // AccountTransaction
        System.Data.Entity.DbSet<AccountTransactionAccountTransactionCategory> AccountTransactionAccountTransactionCategories { get; set; } // AccountTransactionAccountTransactionCategory
        System.Data.Entity.DbSet<AccountTransactionCategory> AccountTransactionCategories { get; set; } // AccountTransactionCategory
        System.Data.Entity.DbSet<AccountTransactionStatus> AccountTransactionStatus { get; set; } // AccountTransactionStatus
        System.Data.Entity.DbSet<AccountTransactionType> AccountTransactionTypes { get; set; } // AccountTransactionType
        System.Data.Entity.DbSet<AuditLog> AuditLogs { get; set; } // AuditLog
        System.Data.Entity.DbSet<Bank> Banks { get; set; } // Bank
        System.Data.Entity.DbSet<BankAccount> BankAccounts { get; set; } // BankAccount
        System.Data.Entity.DbSet<BankSpecificTransactionType> BankSpecificTransactionTypes { get; set; } // BankSpecificTransactionType
        System.Data.Entity.DbSet<Currency> Currencies { get; set; } // Currency
        System.Data.Entity.DbSet<Fund> Funds { get; set; } // Fund
        System.Data.Entity.DbSet<Person> People { get; set; } // Person
        System.Data.Entity.DbSet<Vehicle> Vehicles { get; set; } // Vehicle
        System.Data.Entity.DbSet<VehicleMaintenanceLog> VehicleMaintenanceLogs { get; set; } // VehicleMaintenanceLog
        System.Data.Entity.DbSet<VehicleMaintenanceLogType> VehicleMaintenanceLogTypes { get; set; } // VehicleMaintenanceLogType
        System.Data.Entity.DbSet<VehicleMileageLog> VehicleMileageLogs { get; set; } // VehicleMileageLog
        System.Data.Entity.DbSet<VehiclePart> VehicleParts { get; set; } // VehiclePart
        System.Data.Entity.DbSet<VehiclePartsReplacementLog> VehiclePartsReplacementLogs { get; set; } // VehiclePartsReplacementLog
        System.Data.Entity.DbSet<VehicleRefuelLog> VehicleRefuelLogs { get; set; } // VehicleRefuelLog
        System.Data.Entity.DbSet<VehicleTravelPurposeType> VehicleTravelPurposeTypes { get; set; } // VehicleTravelPurposeType
        System.Data.Entity.DbSet<VehicleType> VehicleTypes { get; set; } // VehicleType

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Database : System.Data.Entity.DbContext, IDatabase
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        public System.Data.Entity.DbSet<AccountStatement> AccountStatements { get; set; } // AccountStatement
        public System.Data.Entity.DbSet<AccountTransaction> AccountTransactions { get; set; } // AccountTransaction
        public System.Data.Entity.DbSet<AccountTransactionAccountTransactionCategory> AccountTransactionAccountTransactionCategories { get; set; } // AccountTransactionAccountTransactionCategory
        public System.Data.Entity.DbSet<AccountTransactionCategory> AccountTransactionCategories { get; set; } // AccountTransactionCategory
        public System.Data.Entity.DbSet<AccountTransactionStatus> AccountTransactionStatus { get; set; } // AccountTransactionStatus
        public System.Data.Entity.DbSet<AccountTransactionType> AccountTransactionTypes { get; set; } // AccountTransactionType
        public System.Data.Entity.DbSet<AuditLog> AuditLogs { get; set; } // AuditLog
        public System.Data.Entity.DbSet<Bank> Banks { get; set; } // Bank
        public System.Data.Entity.DbSet<BankAccount> BankAccounts { get; set; } // BankAccount
        public System.Data.Entity.DbSet<BankSpecificTransactionType> BankSpecificTransactionTypes { get; set; } // BankSpecificTransactionType
        public System.Data.Entity.DbSet<Currency> Currencies { get; set; } // Currency
        public System.Data.Entity.DbSet<Fund> Funds { get; set; } // Fund
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<Vehicle> Vehicles { get; set; } // Vehicle
        public System.Data.Entity.DbSet<VehicleMaintenanceLog> VehicleMaintenanceLogs { get; set; } // VehicleMaintenanceLog
        public System.Data.Entity.DbSet<VehicleMaintenanceLogType> VehicleMaintenanceLogTypes { get; set; } // VehicleMaintenanceLogType
        public System.Data.Entity.DbSet<VehicleMileageLog> VehicleMileageLogs { get; set; } // VehicleMileageLog
        public System.Data.Entity.DbSet<VehiclePart> VehicleParts { get; set; } // VehiclePart
        public System.Data.Entity.DbSet<VehiclePartsReplacementLog> VehiclePartsReplacementLogs { get; set; } // VehiclePartsReplacementLog
        public System.Data.Entity.DbSet<VehicleRefuelLog> VehicleRefuelLogs { get; set; } // VehicleRefuelLog
        public System.Data.Entity.DbSet<VehicleTravelPurposeType> VehicleTravelPurposeTypes { get; set; } // VehicleTravelPurposeType
        public System.Data.Entity.DbSet<VehicleType> VehicleTypes { get; set; } // VehicleType

        static Database()
        {
            System.Data.Entity.Database.SetInitializer<Database>(null);
        }

        public Database()
            : base("Name=MyDbContext")
        {
        }

        public Database(string connectionString)
            : base(connectionString)
        {
        }

        public Database(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public Database(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public Database(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccountConfiguration());
            modelBuilder.Configurations.Add(new AccountStatementConfiguration());
            modelBuilder.Configurations.Add(new AccountTransactionConfiguration());
            modelBuilder.Configurations.Add(new AccountTransactionAccountTransactionCategoryConfiguration());
            modelBuilder.Configurations.Add(new AccountTransactionCategoryConfiguration());
            modelBuilder.Configurations.Add(new AccountTransactionStatusConfiguration());
            modelBuilder.Configurations.Add(new AccountTransactionTypeConfiguration());
            modelBuilder.Configurations.Add(new AuditLogConfiguration());
            modelBuilder.Configurations.Add(new BankConfiguration());
            modelBuilder.Configurations.Add(new BankAccountConfiguration());
            modelBuilder.Configurations.Add(new BankSpecificTransactionTypeConfiguration());
            modelBuilder.Configurations.Add(new CurrencyConfiguration());
            modelBuilder.Configurations.Add(new FundConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new VehicleConfiguration());
            modelBuilder.Configurations.Add(new VehicleMaintenanceLogConfiguration());
            modelBuilder.Configurations.Add(new VehicleMaintenanceLogTypeConfiguration());
            modelBuilder.Configurations.Add(new VehicleMileageLogConfiguration());
            modelBuilder.Configurations.Add(new VehiclePartConfiguration());
            modelBuilder.Configurations.Add(new VehiclePartsReplacementLogConfiguration());
            modelBuilder.Configurations.Add(new VehicleRefuelLogConfiguration());
            modelBuilder.Configurations.Add(new VehicleTravelPurposeTypeConfiguration());
            modelBuilder.Configurations.Add(new VehicleTypeConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccountConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountStatementConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountTransactionConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountTransactionAccountTransactionCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountTransactionCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountTransactionStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountTransactionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AuditLogConfiguration(schema));
            modelBuilder.Configurations.Add(new BankConfiguration(schema));
            modelBuilder.Configurations.Add(new BankAccountConfiguration(schema));
            modelBuilder.Configurations.Add(new BankSpecificTransactionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new FundConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleMaintenanceLogConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleMaintenanceLogTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleMileageLogConfiguration(schema));
            modelBuilder.Configurations.Add(new VehiclePartConfiguration(schema));
            modelBuilder.Configurations.Add(new VehiclePartsReplacementLogConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleRefuelLogConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleTravelPurposeTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new VehicleTypeConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDatabase : IDatabase
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; }
        public System.Data.Entity.DbSet<AccountStatement> AccountStatements { get; set; }
        public System.Data.Entity.DbSet<AccountTransaction> AccountTransactions { get; set; }
        public System.Data.Entity.DbSet<AccountTransactionAccountTransactionCategory> AccountTransactionAccountTransactionCategories { get; set; }
        public System.Data.Entity.DbSet<AccountTransactionCategory> AccountTransactionCategories { get; set; }
        public System.Data.Entity.DbSet<AccountTransactionStatus> AccountTransactionStatus { get; set; }
        public System.Data.Entity.DbSet<AccountTransactionType> AccountTransactionTypes { get; set; }
        public System.Data.Entity.DbSet<AuditLog> AuditLogs { get; set; }
        public System.Data.Entity.DbSet<Bank> Banks { get; set; }
        public System.Data.Entity.DbSet<BankAccount> BankAccounts { get; set; }
        public System.Data.Entity.DbSet<BankSpecificTransactionType> BankSpecificTransactionTypes { get; set; }
        public System.Data.Entity.DbSet<Currency> Currencies { get; set; }
        public System.Data.Entity.DbSet<Fund> Funds { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<Vehicle> Vehicles { get; set; }
        public System.Data.Entity.DbSet<VehicleMaintenanceLog> VehicleMaintenanceLogs { get; set; }
        public System.Data.Entity.DbSet<VehicleMaintenanceLogType> VehicleMaintenanceLogTypes { get; set; }
        public System.Data.Entity.DbSet<VehicleMileageLog> VehicleMileageLogs { get; set; }
        public System.Data.Entity.DbSet<VehiclePart> VehicleParts { get; set; }
        public System.Data.Entity.DbSet<VehiclePartsReplacementLog> VehiclePartsReplacementLogs { get; set; }
        public System.Data.Entity.DbSet<VehicleRefuelLog> VehicleRefuelLogs { get; set; }
        public System.Data.Entity.DbSet<VehicleTravelPurposeType> VehicleTravelPurposeTypes { get; set; }
        public System.Data.Entity.DbSet<VehicleType> VehicleTypes { get; set; }

        public FakeDatabase()
        {
            Accounts = new FakeDbSet<Account>("Id");
            AccountStatements = new FakeDbSet<AccountStatement>("Id");
            AccountTransactions = new FakeDbSet<AccountTransaction>("Id");
            AccountTransactionAccountTransactionCategories = new FakeDbSet<AccountTransactionAccountTransactionCategory>("AccountTransactionId", "AccountTransactionCategoryId");
            AccountTransactionCategories = new FakeDbSet<AccountTransactionCategory>("Id");
            AccountTransactionStatus = new FakeDbSet<AccountTransactionStatus>("Id");
            AccountTransactionTypes = new FakeDbSet<AccountTransactionType>("Id");
            AuditLogs = new FakeDbSet<AuditLog>("Id");
            Banks = new FakeDbSet<Bank>("Id");
            BankAccounts = new FakeDbSet<BankAccount>("Id");
            BankSpecificTransactionTypes = new FakeDbSet<BankSpecificTransactionType>("Id");
            Currencies = new FakeDbSet<Currency>("Id");
            Funds = new FakeDbSet<Fund>("Id");
            People = new FakeDbSet<Person>("Id");
            Vehicles = new FakeDbSet<Vehicle>("Id");
            VehicleMaintenanceLogs = new FakeDbSet<VehicleMaintenanceLog>("Id");
            VehicleMaintenanceLogTypes = new FakeDbSet<VehicleMaintenanceLogType>("Id");
            VehicleMileageLogs = new FakeDbSet<VehicleMileageLog>("Id");
            VehicleParts = new FakeDbSet<VehiclePart>("Id");
            VehiclePartsReplacementLogs = new FakeDbSet<VehiclePartsReplacementLog>("Id");
            VehicleRefuelLogs = new FakeDbSet<VehicleRefuelLog>("Id");
            VehicleTravelPurposeTypes = new FakeDbSet<VehicleTravelPurposeType>("Id");
            VehicleTypes = new FakeDbSet<VehicleType>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        public System.Data.Entity.Database Database { get; }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Account
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)
        public int PersonId { get; set; } // PersonId
        public int CurrencyId { get; set; } // CurrencyId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AccountStatement> AccountStatements { get; set; } // AccountStatement.FK_AccountStatement__Account
        public virtual System.Collections.Generic.ICollection<BankAccount> BankAccounts { get; set; } // BankAccount.FK_BankAccount__Account
        public virtual System.Collections.Generic.ICollection<Fund> Funds { get; set; } // Fund.FK_Fund__Account

        // Foreign keys
        public virtual Currency Currency { get; set; } // FK_Account__Currency
        public virtual Person Person { get; set; } // FK_Account__Person

        public Account()
        {
            AccountStatements = new System.Collections.Generic.List<AccountStatement>();
            BankAccounts = new System.Collections.Generic.List<BankAccount>();
            Funds = new System.Collections.Generic.List<Fund>();
        }
    }

    // AccountStatement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountStatement
    {
        public int Id { get; set; } // Id (Primary key)
        public int AccountId { get; set; } // AccountId
        public System.DateTimeOffset PeriodStart { get; set; } // PeriodStart
        public System.DateTimeOffset PeriodEnd { get; set; } // PeriodEnd
        public decimal StartingBalance { get; set; } // StartingBalance

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AccountTransaction> AccountTransactions { get; set; } // AccountTransaction.FK_AccountTransaction__AccountStatement

        // Foreign keys
        public virtual Account Account { get; set; } // FK_AccountStatement__Account

        public AccountStatement()
        {
            AccountTransactions = new System.Collections.Generic.List<AccountTransaction>();
        }
    }

    // AccountTransaction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransaction
    {
        public int Id { get; set; } // Id (Primary key)
        public int? AccountStatementId { get; set; } // AccountStatementId
        public System.DateTimeOffset? TransactionTime { get; set; } // TransactionTime
        public System.DateTime RecordedDate { get; set; } // RecordedDate
        public int AccountTransactionStatusId { get; set; } // AccountTransactionStatusId
        public decimal Amount { get; set; } // Amount
        public string Payee { get; set; } // Payee (length: 256)
        public string Description { get; set; } // Description (length: 256)
        public int AccountTransactionTypeId { get; set; } // AccountTransactionTypeId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AccountTransactionAccountTransactionCategory> AccountTransactionAccountTransactionCategories { get; set; } // Many to many mapping

        // Foreign keys
        public virtual AccountStatement AccountStatement { get; set; } // FK_AccountTransaction__AccountStatement
        public virtual AccountTransactionStatus AccountTransactionStatus { get; set; } // FK_AccountTransaction__AccountTransactionStatus
        public virtual AccountTransactionType AccountTransactionType { get; set; } // FK_AccountTransaction__AccountTransactionType

        public AccountTransaction()
        {
            AccountTransactionAccountTransactionCategories = new System.Collections.Generic.List<AccountTransactionAccountTransactionCategory>();
        }
    }

    // AccountTransactionAccountTransactionCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionAccountTransactionCategory
    {
        public int AccountTransactionId { get; set; } // AccountTransactionId (Primary key)
        public int AccountTransactionCategoryId { get; set; } // AccountTransactionCategoryId (Primary key)
        public decimal Amount { get; set; } // Amount

        // Foreign keys
        public virtual AccountTransaction AccountTransaction { get; set; } // FK_AccountTransactionAccountTransactionCategory__AccountTransaction
        public virtual AccountTransactionCategory AccountTransactionCategory { get; set; } // FK_AccountTransactionAccountTransactionCategory__AccountTransactionCategory
    }

    // AccountTransactionCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionCategory
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AccountTransactionAccountTransactionCategory> AccountTransactionAccountTransactionCategories { get; set; } // Many to many mapping

        public AccountTransactionCategory()
        {
            AccountTransactionAccountTransactionCategories = new System.Collections.Generic.List<AccountTransactionAccountTransactionCategory>();
        }
    }

    // AccountTransactionStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AccountTransaction> AccountTransactions { get; set; } // AccountTransaction.FK_AccountTransaction__AccountTransactionStatus

        public AccountTransactionStatus()
        {
            AccountTransactions = new System.Collections.Generic.List<AccountTransaction>();
        }
    }

    // AccountTransactionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)
        public bool IsIncome { get; set; } // IsIncome

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AccountTransaction> AccountTransactions { get; set; } // AccountTransaction.FK_AccountTransaction__AccountTransactionType
        public virtual System.Collections.Generic.ICollection<BankSpecificTransactionType> BankSpecificTransactionTypes { get; set; } // BankSpecificTransactionType.FK_BankSpecificTransactionType__AccountTransactionType

        public AccountTransactionType()
        {
            AccountTransactions = new System.Collections.Generic.List<AccountTransaction>();
            BankSpecificTransactionTypes = new System.Collections.Generic.List<BankSpecificTransactionType>();
        }
    }

    // AuditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AuditLog
    {
        public int Id { get; set; } // Id (Primary key)
        public System.Guid MessageId { get; set; } // MessageId
        public System.Guid CorrelationId { get; set; } // CorrelationId
        public System.Guid CausationId { get; set; } // CausationId
        public System.DateTimeOffset Timestamp { get; set; } // Timestamp
        public string MessageTypeName { get; set; } // MessageTypeName (length: 512)
        public string PayloadJson { get; set; } // PayloadJson
    }

    // Bank
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Bank
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<BankAccount> BankAccounts { get; set; } // BankAccount.FK_BankAccount__Bank
        public virtual System.Collections.Generic.ICollection<BankSpecificTransactionType> BankSpecificTransactionTypes { get; set; } // BankSpecificTransactionType.FK_BankSpecificTransactionType__Bank

        public Bank()
        {
            BankAccounts = new System.Collections.Generic.List<BankAccount>();
            BankSpecificTransactionTypes = new System.Collections.Generic.List<BankSpecificTransactionType>();
        }
    }

    // BankAccount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class BankAccount
    {
        public int Id { get; set; } // Id (Primary key)
        public int BankId { get; set; } // BankId
        public int AccountId { get; set; } // AccountId
        public decimal CreditLimit { get; set; } // CreditLimit
        public string AccountNumber { get; set; } // AccountNumber (length: 50)
        public string SortCode { get; set; } // SortCode (length: 50)

        // Foreign keys
        public virtual Account Account { get; set; } // FK_BankAccount__Account
        public virtual Bank Bank { get; set; } // FK_BankAccount__Bank
    }

    // BankSpecificTransactionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class BankSpecificTransactionType
    {
        public int Id { get; set; } // Id (Primary key)
        public int BankId { get; set; } // BankId
        public string Name { get; set; } // Name (length: 256)
        public string Description { get; set; } // Description (length: 256)
        public int? AccountTransactionTypeId { get; set; } // AccountTransactionTypeId

        // Foreign keys
        public virtual AccountTransactionType AccountTransactionType { get; set; } // FK_BankSpecificTransactionType__AccountTransactionType
        public virtual Bank Bank { get; set; } // FK_BankSpecificTransactionType__Bank
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Currency
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Account> Accounts { get; set; } // Account.FK_Account__Currency

        public Currency()
        {
            Accounts = new System.Collections.Generic.List<Account>();
        }
    }

    // Fund
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Fund
    {
        public int Id { get; set; } // Id (Primary key)
        public int AccountId { get; set; } // AccountId
        public string Name { get; set; } // Name (length: 256)

        // Foreign keys
        public virtual Account Account { get; set; } // FK_Fund__Account
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Person
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Account> Accounts { get; set; } // Account.FK_Account__Person

        public Person()
        {
            Accounts = new System.Collections.Generic.List<Account>();
        }
    }

    // Vehicle
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class Vehicle
    {
        public int Id { get; set; } // Id (Primary key)
        public int VehicleTypeId { get; set; } // VehicleTypeId
        public string Name { get; set; } // Name (length: 256)
        public string Make { get; set; } // Make (length: 256)
        public string Model { get; set; } // Model (length: 256)
        public string Registration { get; set; } // Registration (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<VehicleMaintenanceLog> VehicleMaintenanceLogs { get; set; } // VehicleMaintenanceLog.FK_VehicleMaintenanceLog__Vehicle
        public virtual System.Collections.Generic.ICollection<VehicleMileageLog> VehicleMileageLogs { get; set; } // VehicleMileageLog.FK_VehicleMileageLog__Vehicle
        public virtual System.Collections.Generic.ICollection<VehicleRefuelLog> VehicleRefuelLogs { get; set; } // VehicleRefuelLog.FK_VehicleRefuelLog

        // Foreign keys
        public virtual VehicleType VehicleType { get; set; } // FK_Vehicle__VehicleType

        public Vehicle()
        {
            VehicleMaintenanceLogs = new System.Collections.Generic.List<VehicleMaintenanceLog>();
            VehicleMileageLogs = new System.Collections.Generic.List<VehicleMileageLog>();
            VehicleRefuelLogs = new System.Collections.Generic.List<VehicleRefuelLog>();
        }
    }

    // VehicleMaintenanceLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleMaintenanceLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int VehicleId { get; set; } // VehicleId
        public System.DateTimeOffset MaintenanceDateTime { get; set; } // MaintenanceDateTime
        public int Mileage { get; set; } // Mileage

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<VehiclePartsReplacementLog> VehiclePartsReplacementLogs { get; set; } // VehiclePartsReplacementLog.FK_VehiclePartsReplacementLog__VehicleMaintenanceLog

        // Foreign keys
        public virtual Vehicle Vehicle { get; set; } // FK_VehicleMaintenanceLog__Vehicle

        public VehicleMaintenanceLog()
        {
            VehiclePartsReplacementLogs = new System.Collections.Generic.List<VehiclePartsReplacementLog>();
        }
    }

    // VehicleMaintenanceLogType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleMaintenanceLogType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)
    }

    // VehicleMileageLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleMileageLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int VehicleId { get; set; } // VehicleId
        public System.DateTimeOffset TripDateTime { get; set; } // TripDateTime
        public int StartMileage { get; set; } // StartMileage
        public int EndMileage { get; set; } // EndMileage
        public int VehicleTravelPurposeTypeId { get; set; } // VehicleTravelPurposeTypeId
        public string Purpose { get; set; } // Purpose (length: 512)
        public string From { get; set; } // From (length: 512)
        public string To { get; set; } // To (length: 512)

        // Foreign keys
        public virtual Vehicle Vehicle { get; set; } // FK_VehicleMileageLog__Vehicle
        public virtual VehicleTravelPurposeType VehicleTravelPurposeType { get; set; } // FK_VehicleMileageLog__VehicleTravelPurposeType
    }

    // VehiclePart
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehiclePart
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)
        public int VehicleTypeId { get; set; } // VehicleTypeId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<VehiclePartsReplacementLog> VehiclePartsReplacementLogs { get; set; } // VehiclePartsReplacementLog.FK_VehiclePartsReplacementLog__VehiclePart

        // Foreign keys
        public virtual VehicleType VehicleType { get; set; } // FK_VehiclePart__VehicleType

        public VehiclePart()
        {
            VehiclePartsReplacementLogs = new System.Collections.Generic.List<VehiclePartsReplacementLog>();
        }
    }

    // VehiclePartsReplacementLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehiclePartsReplacementLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int VehicleMaintenanceLogId { get; set; } // VehicleMaintenanceLogId
        public int VehiclePartId { get; set; } // VehiclePartId

        // Foreign keys
        public virtual VehicleMaintenanceLog VehicleMaintenanceLog { get; set; } // FK_VehiclePartsReplacementLog__VehicleMaintenanceLog
        public virtual VehiclePart VehiclePart { get; set; } // FK_VehiclePartsReplacementLog__VehiclePart
    }

    // VehicleRefuelLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleRefuelLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int VehicleId { get; set; } // VehicleId
        public decimal FuelLitres { get; set; } // FuelLitres
        public int PencePerLitre { get; set; } // PencePerLitre
        public int Mileage { get; set; } // Mileage

        // Foreign keys
        public virtual Vehicle Vehicle { get; set; } // FK_VehicleRefuelLog
    }

    // VehicleTravelPurposeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleTravelPurposeType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<VehicleMileageLog> VehicleMileageLogs { get; set; } // VehicleMileageLog.FK_VehicleMileageLog__VehicleTravelPurposeType

        public VehicleTravelPurposeType()
        {
            VehicleMileageLogs = new System.Collections.Generic.List<VehicleMileageLog>();
        }
    }

    // VehicleType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Vehicle> Vehicles { get; set; } // Vehicle.FK_Vehicle__VehicleType
        public virtual System.Collections.Generic.ICollection<VehiclePart> VehicleParts { get; set; } // VehiclePart.FK_VehiclePart__VehicleType

        public VehicleType()
        {
            Vehicles = new System.Collections.Generic.List<Vehicle>();
            VehicleParts = new System.Collections.Generic.List<VehiclePart>();
        }
    }

    #endregion

    #region POCO Configuration

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountConfiguration()
            : this("dbo")
        {
        }

        public AccountConfiguration(string schema)
        {
            ToTable("Account", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.PersonId).HasColumnName(@"PersonId").HasColumnType("int").IsRequired();
            Property(x => x.CurrencyId).HasColumnName(@"CurrencyId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Currency).WithMany(b => b.Accounts).HasForeignKey(c => c.CurrencyId).WillCascadeOnDelete(false); // FK_Account__Currency
            HasRequired(a => a.Person).WithMany(b => b.Accounts).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_Account__Person
        }
    }

    // AccountStatement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountStatementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountStatement>
    {
        public AccountStatementConfiguration()
            : this("dbo")
        {
        }

        public AccountStatementConfiguration(string schema)
        {
            ToTable("AccountStatement", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsRequired();
            Property(x => x.PeriodStart).HasColumnName(@"PeriodStart").HasColumnType("datetimeoffset").IsRequired();
            Property(x => x.PeriodEnd).HasColumnName(@"PeriodEnd").HasColumnType("datetimeoffset").IsRequired();
            Property(x => x.StartingBalance).HasColumnName(@"StartingBalance").HasColumnType("money").IsRequired().HasPrecision(19,4);

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.AccountStatements).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_AccountStatement__Account
        }
    }

    // AccountTransaction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountTransaction>
    {
        public AccountTransactionConfiguration()
            : this("dbo")
        {
        }

        public AccountTransactionConfiguration(string schema)
        {
            ToTable("AccountTransaction", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountStatementId).HasColumnName(@"AccountStatementId").HasColumnType("int").IsOptional();
            Property(x => x.TransactionTime).HasColumnName(@"TransactionTime").HasColumnType("datetimeoffset").IsOptional();
            Property(x => x.RecordedDate).HasColumnName(@"RecordedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.AccountTransactionStatusId).HasColumnName(@"AccountTransactionStatusId").HasColumnType("int").IsRequired();
            Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Payee).HasColumnName(@"Payee").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.AccountTransactionTypeId).HasColumnName(@"AccountTransactionTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.AccountStatement).WithMany(b => b.AccountTransactions).HasForeignKey(c => c.AccountStatementId).WillCascadeOnDelete(false); // FK_AccountTransaction__AccountStatement
            HasRequired(a => a.AccountTransactionStatus).WithMany(b => b.AccountTransactions).HasForeignKey(c => c.AccountTransactionStatusId).WillCascadeOnDelete(false); // FK_AccountTransaction__AccountTransactionStatus
            HasRequired(a => a.AccountTransactionType).WithMany(b => b.AccountTransactions).HasForeignKey(c => c.AccountTransactionTypeId).WillCascadeOnDelete(false); // FK_AccountTransaction__AccountTransactionType
        }
    }

    // AccountTransactionAccountTransactionCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionAccountTransactionCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountTransactionAccountTransactionCategory>
    {
        public AccountTransactionAccountTransactionCategoryConfiguration()
            : this("dbo")
        {
        }

        public AccountTransactionAccountTransactionCategoryConfiguration(string schema)
        {
            ToTable("AccountTransactionAccountTransactionCategory", schema);
            HasKey(x => new { x.AccountTransactionId, x.AccountTransactionCategoryId });

            Property(x => x.AccountTransactionId).HasColumnName(@"AccountTransactionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountTransactionCategoryId).HasColumnName(@"AccountTransactionCategoryId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("money").IsRequired().HasPrecision(19,4);

            // Foreign keys
            HasRequired(a => a.AccountTransaction).WithMany(b => b.AccountTransactionAccountTransactionCategories).HasForeignKey(c => c.AccountTransactionId).WillCascadeOnDelete(false); // FK_AccountTransactionAccountTransactionCategory__AccountTransaction
            HasRequired(a => a.AccountTransactionCategory).WithMany(b => b.AccountTransactionAccountTransactionCategories).HasForeignKey(c => c.AccountTransactionCategoryId).WillCascadeOnDelete(false); // FK_AccountTransactionAccountTransactionCategory__AccountTransactionCategory
        }
    }

    // AccountTransactionCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountTransactionCategory>
    {
        public AccountTransactionCategoryConfiguration()
            : this("dbo")
        {
        }

        public AccountTransactionCategoryConfiguration(string schema)
        {
            ToTable("AccountTransactionCategory", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // AccountTransactionStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountTransactionStatus>
    {
        public AccountTransactionStatusConfiguration()
            : this("dbo")
        {
        }

        public AccountTransactionStatusConfiguration(string schema)
        {
            ToTable("AccountTransactionStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // AccountTransactionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AccountTransactionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountTransactionType>
    {
        public AccountTransactionTypeConfiguration()
            : this("dbo")
        {
        }

        public AccountTransactionTypeConfiguration(string schema)
        {
            ToTable("AccountTransactionType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.IsIncome).HasColumnName(@"IsIncome").HasColumnType("bit").IsRequired();
        }
    }

    // AuditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class AuditLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AuditLog>
    {
        public AuditLogConfiguration()
            : this("dbo")
        {
        }

        public AuditLogConfiguration(string schema)
        {
            ToTable("AuditLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MessageId).HasColumnName(@"MessageId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.CorrelationId).HasColumnName(@"CorrelationId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.CausationId).HasColumnName(@"CausationId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Timestamp).HasColumnName(@"Timestamp").HasColumnType("datetimeoffset").IsRequired();
            Property(x => x.MessageTypeName).HasColumnName(@"MessageTypeName").HasColumnType("nvarchar").IsRequired().HasMaxLength(512);
            Property(x => x.PayloadJson).HasColumnName(@"PayloadJson").HasColumnType("nvarchar(max)").IsRequired();
        }
    }

    // Bank
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class BankConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Bank>
    {
        public BankConfiguration()
            : this("dbo")
        {
        }

        public BankConfiguration(string schema)
        {
            ToTable("Bank", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // BankAccount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class BankAccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BankAccount>
    {
        public BankAccountConfiguration()
            : this("dbo")
        {
        }

        public BankAccountConfiguration(string schema)
        {
            ToTable("BankAccount", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BankId).HasColumnName(@"BankId").HasColumnType("int").IsRequired();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsRequired();
            Property(x => x.CreditLimit).HasColumnName(@"CreditLimit").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.SortCode).HasColumnName(@"SortCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.BankAccounts).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_BankAccount__Account
            HasRequired(a => a.Bank).WithMany(b => b.BankAccounts).HasForeignKey(c => c.BankId).WillCascadeOnDelete(false); // FK_BankAccount__Bank
        }
    }

    // BankSpecificTransactionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class BankSpecificTransactionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BankSpecificTransactionType>
    {
        public BankSpecificTransactionTypeConfiguration()
            : this("dbo")
        {
        }

        public BankSpecificTransactionTypeConfiguration(string schema)
        {
            ToTable("BankSpecificTransactionType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BankId).HasColumnName(@"BankId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.AccountTransactionTypeId).HasColumnName(@"AccountTransactionTypeId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AccountTransactionType).WithMany(b => b.BankSpecificTransactionTypes).HasForeignKey(c => c.AccountTransactionTypeId).WillCascadeOnDelete(false); // FK_BankSpecificTransactionType__AccountTransactionType
            HasRequired(a => a.Bank).WithMany(b => b.BankSpecificTransactionTypes).HasForeignKey(c => c.BankId).WillCascadeOnDelete(false); // FK_BankSpecificTransactionType__Bank
        }
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class CurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Currency>
    {
        public CurrencyConfiguration()
            : this("dbo")
        {
        }

        public CurrencyConfiguration(string schema)
        {
            ToTable("Currency", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // Fund
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class FundConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Fund>
    {
        public FundConfiguration()
            : this("dbo")
        {
        }

        public FundConfiguration(string schema)
        {
            ToTable("Fund", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.Funds).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_Fund__Account
        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("dbo")
        {
        }

        public PersonConfiguration(string schema)
        {
            ToTable("Person", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // Vehicle
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Vehicle>
    {
        public VehicleConfiguration()
            : this("dbo")
        {
        }

        public VehicleConfiguration(string schema)
        {
            ToTable("Vehicle", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VehicleTypeId).HasColumnName(@"VehicleTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Make).HasColumnName(@"Make").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Model).HasColumnName(@"Model").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Registration).HasColumnName(@"Registration").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);

            // Foreign keys
            HasRequired(a => a.VehicleType).WithMany(b => b.Vehicles).HasForeignKey(c => c.VehicleTypeId).WillCascadeOnDelete(false); // FK_Vehicle__VehicleType
        }
    }

    // VehicleMaintenanceLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleMaintenanceLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleMaintenanceLog>
    {
        public VehicleMaintenanceLogConfiguration()
            : this("dbo")
        {
        }

        public VehicleMaintenanceLogConfiguration(string schema)
        {
            ToTable("VehicleMaintenanceLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VehicleId).HasColumnName(@"VehicleId").HasColumnType("int").IsRequired();
            Property(x => x.MaintenanceDateTime).HasColumnName(@"MaintenanceDateTime").HasColumnType("datetimeoffset").IsRequired();
            Property(x => x.Mileage).HasColumnName(@"Mileage").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Vehicle).WithMany(b => b.VehicleMaintenanceLogs).HasForeignKey(c => c.VehicleId).WillCascadeOnDelete(false); // FK_VehicleMaintenanceLog__Vehicle
        }
    }

    // VehicleMaintenanceLogType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleMaintenanceLogTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleMaintenanceLogType>
    {
        public VehicleMaintenanceLogTypeConfiguration()
            : this("dbo")
        {
        }

        public VehicleMaintenanceLogTypeConfiguration(string schema)
        {
            ToTable("VehicleMaintenanceLogType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // VehicleMileageLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleMileageLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleMileageLog>
    {
        public VehicleMileageLogConfiguration()
            : this("dbo")
        {
        }

        public VehicleMileageLogConfiguration(string schema)
        {
            ToTable("VehicleMileageLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VehicleId).HasColumnName(@"VehicleId").HasColumnType("int").IsRequired();
            Property(x => x.TripDateTime).HasColumnName(@"TripDateTime").HasColumnType("datetimeoffset").IsRequired();
            Property(x => x.StartMileage).HasColumnName(@"StartMileage").HasColumnType("int").IsRequired();
            Property(x => x.EndMileage).HasColumnName(@"EndMileage").HasColumnType("int").IsRequired();
            Property(x => x.VehicleTravelPurposeTypeId).HasColumnName(@"VehicleTravelPurposeTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Purpose).HasColumnName(@"Purpose").HasColumnType("nvarchar").IsRequired().HasMaxLength(512);
            Property(x => x.From).HasColumnName(@"From").HasColumnType("nvarchar").IsRequired().HasMaxLength(512);
            Property(x => x.To).HasColumnName(@"To").HasColumnType("nvarchar").IsRequired().HasMaxLength(512);

            // Foreign keys
            HasRequired(a => a.Vehicle).WithMany(b => b.VehicleMileageLogs).HasForeignKey(c => c.VehicleId).WillCascadeOnDelete(false); // FK_VehicleMileageLog__Vehicle
            HasRequired(a => a.VehicleTravelPurposeType).WithMany(b => b.VehicleMileageLogs).HasForeignKey(c => c.VehicleTravelPurposeTypeId).WillCascadeOnDelete(false); // FK_VehicleMileageLog__VehicleTravelPurposeType
        }
    }

    // VehiclePart
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehiclePartConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehiclePart>
    {
        public VehiclePartConfiguration()
            : this("dbo")
        {
        }

        public VehiclePartConfiguration(string schema)
        {
            ToTable("VehiclePart", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.VehicleTypeId).HasColumnName(@"VehicleTypeId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.VehicleType).WithMany(b => b.VehicleParts).HasForeignKey(c => c.VehicleTypeId).WillCascadeOnDelete(false); // FK_VehiclePart__VehicleType
        }
    }

    // VehiclePartsReplacementLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehiclePartsReplacementLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehiclePartsReplacementLog>
    {
        public VehiclePartsReplacementLogConfiguration()
            : this("dbo")
        {
        }

        public VehiclePartsReplacementLogConfiguration(string schema)
        {
            ToTable("VehiclePartsReplacementLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VehicleMaintenanceLogId).HasColumnName(@"VehicleMaintenanceLogId").HasColumnType("int").IsRequired();
            Property(x => x.VehiclePartId).HasColumnName(@"VehiclePartId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.VehicleMaintenanceLog).WithMany(b => b.VehiclePartsReplacementLogs).HasForeignKey(c => c.VehicleMaintenanceLogId).WillCascadeOnDelete(false); // FK_VehiclePartsReplacementLog__VehicleMaintenanceLog
            HasRequired(a => a.VehiclePart).WithMany(b => b.VehiclePartsReplacementLogs).HasForeignKey(c => c.VehiclePartId).WillCascadeOnDelete(false); // FK_VehiclePartsReplacementLog__VehiclePart
        }
    }

    // VehicleRefuelLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleRefuelLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleRefuelLog>
    {
        public VehicleRefuelLogConfiguration()
            : this("dbo")
        {
        }

        public VehicleRefuelLogConfiguration(string schema)
        {
            ToTable("VehicleRefuelLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VehicleId).HasColumnName(@"VehicleId").HasColumnType("int").IsRequired();
            Property(x => x.FuelLitres).HasColumnName(@"FuelLitres").HasColumnType("decimal").IsRequired().HasPrecision(18,0);
            Property(x => x.PencePerLitre).HasColumnName(@"PencePerLitre").HasColumnType("int").IsRequired();
            Property(x => x.Mileage).HasColumnName(@"Mileage").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Vehicle).WithMany(b => b.VehicleRefuelLogs).HasForeignKey(c => c.VehicleId).WillCascadeOnDelete(false); // FK_VehicleRefuelLog
        }
    }

    // VehicleTravelPurposeType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleTravelPurposeTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleTravelPurposeType>
    {
        public VehicleTravelPurposeTypeConfiguration()
            : this("dbo")
        {
        }

        public VehicleTravelPurposeTypeConfiguration(string schema)
        {
            ToTable("VehicleTravelPurposeType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // VehicleType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.25.0.0")]
    public class VehicleTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VehicleType>
    {
        public VehicleTypeConfiguration()
            : this("dbo")
        {
        }

        public VehicleTypeConfiguration(string schema)
        {
            ToTable("VehicleType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    #endregion

}
// </auto-generated>

